---
title: "Introdução ao R para análise de dados em Psicologia"
execute:
  echo: true
author: 
  - name:  "Francisco Pablo Huascar Aragão Pinheiro"
    orcid: 0000-0001-9289-845X
institute: <img src="images/ufc_horizontal.png" width="250">
format: 
  revealjs:
      code-link: true
      code-tools: true
      code-line-numbers: false
      theme: simple
      fig-width: 6
      fig-asp: 0.618
      scrollable: true
progress: true
slide-number: true
logo: images/lappsie.png
editor: visual
editor_options: 
  chunk_output_type: console
---

## Quem sou eu

```{r}
#| label: setup
#| echo: false 

library(tidyverse)
library(nycflights13)
library(janitor)
library(gt)
```

::: {style="line-height: 1;"}
::: columns
::: {.column width="40%"}
![](images/logo_pos.png) ![](images/lappsie.png)
:::

::: {.column width="60%"}
::: incremental
-   [Psicólogo (UFC)]{style="font-size:25pt;"}
-   [Mestre em Psicologia (UFC)]{style="font-size:25pt;"}
-   [Doutor em educação (UFC)]{style="font-size:25pt;"}
-   [Professor do campus Sobral da UFC]{style="font-size:25pt;"}
-   [Recentemente, um entusiasta do R]{style="font-size:25pt;"}
:::
:::
:::
:::

::: aside
Meu [currículo lattes](http://lattes.cnpq.br/8266089190930601): acesse [aqui](http://lattes.cnpq.br/8266089190930601)
:::

## R for Data Science

::: columns
::: {.column width="50%"}
Livro base para o mini curso
:::

::: {.column width="50%"}
[![](images/r_for_d_s.jpg){fig-alt="Capa do livro R for Data Science. Uma coruja se destaca na ilustração" fig-align="right" width="412"}](https://r4ds.had.co.nz/)
:::
:::

## R for Data Science

-   Neste [link](https://r4ds.had.co.nz/ "R for Data Science") você pode acessar a primeira edição do livro:

<https://r4ds.had.co.nz/>

-   E [aqui](https://r4ds.hadley.nz/ "R for Data Science") você pode acessar a segunda edição que ainda está sendo finalizada:

<https://r4ds.hadley.nz/>

::: aside
Estes slides tem como base o conteúdo da segunda edição
:::

# 4 Transformação de dados

## 4.1 Introdução

-   É raro que os dados estejam da forma certa para fazer análises ou gráficos
-   Transformações:
    -   Criar novas variáveis
    -   Resumir dados
    -   Renomear variáveis
    -   Reordenar casos
-   [`dplyr`](https://dplyr.tidyverse.org/index.html)
-   [`nycflights13`](https://rdrr.io/cran/nycflights13/man/flights.html)

## Pacotes

```{r}
#| eval: false

library(tidyverse)
library(nycflights13)
library(janitor)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   `r nrow(flights)` vôos que partiram de NYC em 2013
-   [US Bureau of Transportation Statistics](http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0)
-   `?flights`

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights

flights
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   tibble: tipo especial de banco de dados usado pelo [`tydiverse`](https://www.tidyverse.org/)
-   projetados para grandes conjuntos de dados
    -   mostram apenas as primeiras linhas e apenas as colunas que cabem na tela
    -   para ver todas as colunas: `glimpse`

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights glimpse

glimpse(flights)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   Tipo de cada variável
    -   `<int>`: números inteiros
    -   `<dbl>`: números reais
    -   `<chr>`: caracteres
    -   `<dttm>`: data e hora

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

-   Incluído no pacote [`ggplot2`](https://ggplot2.tidyverse.org/index.html)
-   Dados sobre economia de combustível
-   Modelos que tiveram novos lançamentos entre 1999 e 2008
-   `r nrow(mpg)` linhas (carros)
-   `r ncol(mpg)` variáveis

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

```{r}
#| label: glimpse mpg

glimpse(mpg)
```

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

| Variável     |                                |
|--------------|--------------------------------|
| manufacturer | Nome do fabricante             |
| model        | Nome do modelo                 |
| displ        | Cilindrada do motor, em litros |
| year         | Ano de fabricação              |
| cyl          | Número de cilindros            |
| trans        | Tipo de câmbio (transmissão)   |
| drv          | tipo de tração                 |

## Banco para exercícios: [mpg](https://ggplot2.tidyverse.org/reference/mpg.html)

| Variável |                             |
|----------|-----------------------------|
| cty      | Milhas por galão na cidade  |
| hwy      | Milhas por galão na estrada |
| fl       | Tipo de combustível         |
| class    | Tipo de carro               |
|          |                             |

## O Básico do `dplyr`

-   verbos do dplyr (funções): manipulação de dados
    -   primeiro argumento: banco de dados
    -   argumentos subsequentes: quais colunas operar: nomes das variáveis sem aspas
    -   saída: novo banco de dados

## O Básico do `dplyr`

```{r}
filter(mpg, manufacturer == "ford")
```

## O Básico do `dplyr`

```{r}
select(mpg, model)
```

## O Básico do `dplyr`

-   pipe: `|>`: "e então"

## `|>`

```{r}
#| label: pipe
mpg |> 
  glimpse()
```

## `|>`

```{r}
#| label: pipe 2

mpg |> 
  filter(manufacturer == "audi") |> 
  group_by(trans) |> 
  summarise(
    "média na cidade" = mean(cty),
    "média na rodovia" = mean(hwy)
    )
```

## `|>`

-   Atalho de teclado (windows)
    -   ctrl + shift + m
-   Atalho de teclado (mac os)
    -   cmd + shift + m

## 4.2 Linhas - rows (casos/sujeitos/observações)

-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)
-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)
-   [`distinct()`](https://dplyr.tidyverse.org/reference/arrange.html)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

-   filtra (mantém \| deixa passar) linhas baseado em valores das colunas (variáveis)
-   primeiro argumento: banco de dados
-   segundo e subsequentes: condições que devem ser verdade para manter a linha (caso)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
flights |> 
  filter(dep_delay > 120)
```

## Exercício

-   No banco de dados `mpg`, encontre os carros que tem um rendimento na cidade maior do que 17 galões por milha (`cty`)

## Resposta

```{r}
#| label: exercício - filter(mpg)

mpg |> 
  filter(cty > 17)
```

## Operadores lógicos

-   `>` maior que
-   `>=` maior ou igual que
-   `<` menor que
-   `<=` menor ou igual que
-   `==` igual a
-   `!=` não é igual a

## Operadores lógicos

-   Combinar codições:
    -   `&` "e" ("verifique ambas as condições")
    -   `,` "e" ("verifique ambas as condições")
    -   `|` "ou" ("verifique qualquer uma das condições")

## Operadores lógicos

```{r}
#| label: Voos que partiram em 1º de janeiro

flights |> 
  filter(day == 1 & month == 1)
```

## Exercícios

No banco de dados `mpg`, encontre os carros da fabricante (`manufacturer`) "jeep" que têm 6 cilindros (`cyl`)

## Resposta

```{r}
#| label: exercício - filter &
mpg |> 
  filter(manufacturer == "jeep" & cyl == 6)
```

## Resposta

```{r}
#| label: exercício - filter & (solução alternativa)
mpg |> 
  filter(manufacturer == "jeep", cyl == 6)
```

## Operadores lógicos

```{r}
#| label: Voos que partiram em janeiro ou fevereiro

flights |> 
  filter(month == 1 | month == 2)
```

## Operadores lógicos

```{r}
#| label: "%in%"

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2))
```

## Operadores lógicos

```{r}
#| label: segundo exemplo

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2,6,11))
```

## Exercícios

No banco de dados `mpg`, localize os carros que tem 6 ou 8 cilindors (`cyl`)

## Resposta

```{r}
#| label: exercício - filter |

mpg |> 
  filter(cyl == 6 | cyl == 8)
```

## Resposta

```{r}
#| label: exercício - filter | resposta alternativa

mpg |> 
  filter(cyl %in% c(6,8))
```

## Exercícios

No banco de dados `mpg`, ache os carros que foram fabricados (`manufacturer`) pelas marcas honda, nissan ou toyota

## Resposta

```{r}
#| label: exercício - filter %in%

mpg |> 
  filter(manufacturer %in% c("honda", "nissan", "toyota"))
```

## Resposta

```{r}
#| label: exercício - filter %in% - resposta alternativa

mpg |> 
  filter(manufacturer == "honda" | manufacturer == "nissan" | manufacturer == "toyota")

```

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

-   Nunca altera o banco de dados original
-   É criado um novo banco de dados
-   Para salvar o novo banco de dados, use o operador `<-`

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
jan1 <- flights |> 
  filter(month == 1 & day == 1)

jan1
```

## Exercício

A partir do banco de dados `mpg`, salve um novo banco de dados chamado `ford` com todos os carros fabricados por esta marca.

## Resposta

```{r}
#| label: salvando os dados filtrados

ford <- mpg |> 
  filter(manufacturer == "ford")

ford
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

-   Muda a ordem das linhas baseado nos valores das colunas

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

::: panel-tabset
### Sem ordem

```{r}
#| label: sem ordem

flights  
```

### Atraso na partida

```{r}
#| label: exemplo de arranje com uma só variável 2

flights |> 
  arrange(dep_delay)
```
:::

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

-   Mais de um nome de coluna: cada coluna adicional desempata os valores das colunas anteriores

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

```{r}
#| label: exemplo de arrange com mais de uma variável

flights |> 
  arrange(dep_delay, arr_time)
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

-   Para ver do maior pro menor: `desc()`

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

```{r}
#| label: desc()

flights |> 
  arrange(desc(dep_delay))
```

## Exercícios

No banco `mpg`, identifique o modelo com pior rendimento na cidade (`cty`)

## Resposta

```{r}
mpg |> 
  arrange(cty)
```

## Exercícios

No banco `mpg`, encontre o modelo com melhor rendimento na estrada (`hwy`)

## Resposta

```{r}
mpg |> 
  arrange(desc(hwy))
```

## Exercício

No banco `mpg`, ache o carro da marca ford (`manufacturer`) com melhor rendimento na cidade (`cty`)

## Resposta

```{r}
mpg |> 
  filter(manufacturer == "ford") |> 
  arrange(desc(cty))
```

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)

-   Localiza todas as linhas únicas em um conjunto de dados

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)

::: panel-tabset
### Origem

```{r}
flights |> 
  distinct(origin)
```

### Destino

```{r}
flights |> 
  distinct(dest)
```
:::

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)

```{r}
flights |> 
  distinct(origin,dest)
```

## Exercícios

Quais são os fabricantes (`manufacturer`) encontrados no banco `mpg`

## Resposta

```{r}

mpg |> 
  distinct(manufacturer)
```

## Exercícios

No banco `mpg`, crie uma tabela com os fabricantes (`manufacturer`) e seus respectivos modelos

## Resposta

```{r}

mpg |> 
  distinct(manufacturer,model) 
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

-   Número de ocorrências em cada categoria

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}

flights |> 
  count(dest)
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}
flights |> 
  count(origin, dest)
  
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

-   O argumento `sort = TRUE` mostra o número de ocorrências em ordem descendente

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}
flights |> 
  count(dest,
        sort = T)
```

## Exercício

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`)

## Resposta

```{r}
mpg |> 
  count(manufacturer)
```

## Exercício

Agora, mostre a quantidade de ocorrências somente do fabricante (`manufacturer`) jeep

## Resposta

```{r}
mpg |> 
  filter(manufacturer == "jeep") |> 
  count(manufacturer)
```

## Exercício

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`) e seus respectivos modelos (`model`)

## Resposta

```{r}
mpg |> 
  count(manufacturer, model)
```

## Exercícios {.smaller}

-   Em um único pipeline, encontre todos os voos que atendem a todas as seguintes condições:
    -   Tiveram um atraso de chegada de duas ou mais horas;
    -   Voaram para Houston (IAH ou HOU);
    -   Foram operados pela United, American ou Delta;
    -   Partiram no verão (julho, agosto e setembro);
    -   Chegaram com mais de duas horas de atraso, mas não saíram atrasados.

## Exercícios

Tiveram um atraso de chegada (`arr_delay`) de duas ou mais horas.

## Resposta

```{r}
flights |> 
  filter(arr_delay >= 120)
  
```

## Exercícios

Voaram para Houston (IAH ou HOU - `dest`).

## Resposta

```{r}
flights |> 
  filter(dest %in% c("IAH","HOU"))
```

## Exercícios

Foram operados (`carrier`) pela United, American ou Delta. Podemos encontrar os códigos da transportadora para as companhias aéreas no banco de dados `airlines`

## Resposta

```{r}
flights |> 
  filter(carrier %in% c("UA","AA","DL"))
```

## Exercícios

Partiram no verão (julho, agosto e setembro - `month`).

## Resposta

```{r}
flights |> 
  filter(month %in% c(7,8,9))
```

## Exercícios

Chegaram com mais de duas horas de atraso (`arr_delay`), mas não saíram atrasados (`dep_delay`).

## Resposta

```{r}
flights |> 
   filter(arr_delay > 120 &  dep_delay <= 0)
```

## Exercícios

Organize o banco de dados `flights` para encontrar os voos com os maiores atrasos de partida (`dep_delay`) mais longos

## Resposta

```{r}

flights |> 
  arrange(desc(dep_delay))
```

## Exercícios

Houve um voo em todos os dias de 2013?

## Resposta 1

```{r}
flights  |> 
  filter(year == 2013)  |>
  distinct(month, day) |> 
  count(month)
  
```

## Resposta 2

```{r}
flights |> 
  filter(year == 2013) |> 
  distinct(month,day) |> 
  count(day) |> 
  print(n = Inf)
```

## 4.2 Colunas

-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html): cria novas colunas derivadas das colunas existentes
-   [`select()`](https://dplyr.tidyverse.org/reference/select.html): altera quais colunas estão presentes
-   [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): altera os nomes das colunas
-   [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html): altera as posições das colunas

## Banco para exercícios [`economics`](https://ggplot2.tidyverse.org/reference/economics.html)

-   Incluído no pacote [`ggplot2`](https://ggplot2.tidyverse.org/)

-   Série temporal sobre a economia dos EUA

-   `r nrow(economics)` linhas (casos)

-   `r ncol(economics)` colunas (variáveis)

## Banco para exercícios [`economics`](https://ggplot2.tidyverse.org/reference/economics.html)

```{r}
glimpse(economics)
```

## Banco para exercícios [`economics`](https://ggplot2.tidyverse.org/reference/economics.html)

| Variável |                                                                                       |
|-----------------|-------------------------------------------------------|
| date     | Mês da coleta de dados (`r min(year(economics$date))`- `r max(year(economics$date))`) |
| pce      | Gastos de consumo pessoal, em bilhões de dólares                                      |
| pop      | População total, em milhares                                                          |
| psavert  | Taxa de poupança pessoal                                                              |
| uempmed  | Duração mediana do desemprego, em semanas                                             |
| unemploy | Número de desempregados em milhares                                                   |

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

`air_time`: quantidade de tempo gasta no ar, em minutos `air_time_horas`: `air_time`/60

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

-   Novas colunas são adicionadas no lado direito do conjunto de dados
    -   difícil de vizualizar
-   `.before` ("antes") e `.after` ("depois") para indicar onde a variável deve ficar

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .before = 1
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .before = year
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .after = 3
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .after = day
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

-   `.keep = c("all", "used", "unused", "none")`
    -   `"all"` retém todas as colunas (padrão)
    -   `"used"` retém apenas as colunas usadas para criar novas colunas
    -   `"unused"` retém apenas as colunas não usadas
    -   `"none"` não retém nenhuma coluna extra de .data. Apenas as variáveis de agrupamento e as colunas criadas são mantidas.

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .keep = "used"
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

-   Não altera o banco de dados orignial
-   É preciso salvar a coluna nova no próprio banco ou em outro objeto com o operador de atribuição `<-`

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
flights <- flights |> 
  mutate(
    air_time_horas = air_time/60,
    .after = day
    )

glimpse(flights)
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

```{r}
air_time_horas <- flights |> 
  mutate(
    air_time_horas = air_time/60,
    .keep = "none"
    )

air_time_horas
```

## Exercícios

```{r}
data("economics")

print(economics)
```

## Exercícios

Crie uma coluna (variável) chamada `consumo_percapita` que calcule a relação entre os gastos de consumo pessoal (`pce`) e a população (`pop`).

## Resposta

```{r}
economics |> 
  mutate(
    consumo_percapita = pce/pop
    )
```

## Exercícios

Crie uma variável chamada `des_hab` a taxa de desempregados (`unemploy`) por habitante (`pop`)

## Resposta

```{r}
economics |> 
  mutate(
    des_hab = unemploy/pop
  )
  
```

## Exercícios

Salve em um objeto chamado `des_hab_2008` somente a variável `des_hab` criada anteriormente, mas queremos apenas os dados referentes ao ano de 2008.

Dica 1: você pude usar a função ([`year`](https://lubridate.tidyverse.org/reference/year.html)) para transmformar variável `date` em ano!

Dica 2: lembre que o operador de atribuição (`<-`) é utilizado para salvar objetos

Dica 3: lembre do que aprendemos com a função `filter()`

## Resposta - parte 1

```{r}
economics |> 
  mutate(
    date = year(date)
    )  
```

## Resposta - parte 2

```{r}
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop
    )
```

## Resposta - parte 3

```{r}
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    )
```

## Resposta - parte 4

```{r}
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    ) |>
  filter(date == 2008)
```

## Resposta - parte 5

```{r}
des_hab_2008 <- economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    ) |>
  filter(date == 2008)

des_hab_2008
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html): Criação de variáveis compostas

-   Criadas a partir da combinação de duas ou mais variáveis originais
-   Objetivo: capturar uma determinada dimensão ou constructo que não pode ser medido diretamente por nenhuma das variáveis isoladamente.
-   Exemplo: fator ou componente de uma escala calculado pela média de um grupo de itens

## DASS-21

-   Três dimensões: depressão, ansiedade e estresse
-   21 itens, sendo 7 para cada dimensão
-   Escalade resposta: 0 a 3
-   Valores mais altos indicam níveis mais elevados de depressão, ansiedade e estresse
-   Cada dimensão é calculada com a soma dos respectivos itens

## DASS-21: depressão

```{r}
#| echo: false
dass_itens <- read_csv("./data/dass_21_itens.csv")

depressao_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |>
  slice(c(3,5,10,13,16,17,21)) |>
  mutate(
    Item = c(3,5,10,13,16,17,21),
    .before = 1
    ) |> 
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  )

depressao_itens
```

## DASS-21: Ansiedade

```{r}
#| echo: false

ansiedade_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |> 
  slice(c(2,4,7,9,15,19,20)) |> 
  mutate(
    Item = c(2,4,7,9,15,19,20),
    .before = 1
    ) |>
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  )

ansiedade_itens  
```

## DASS-21: Estresse

```{r}
#| echo: false

estresse_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |> 
  slice(c(1,6,8,11,12,14,18)) |> 
  mutate(
    Item = c(1,6,8,11,12,14,18),
    .before = 1
    ) |> 
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  )

estresse_itens
```

## `dass_simulado`: Importação do banco

```{r}
#| echo: false
#| include: false
#| eval: false

# Definir a quantidade de participantes
n_participants <- 100

# Gerar as variáveis aleatórias para as questões da DASS-21
dass_values <- replicate(21, sample(0:3, size = n_participants, replace = TRUE))
dass_df <- data.frame(dass_values)

# Adicionar variáveis para sexo e idade
sex <- sample(c("M", "F"), n_participants, replace = TRUE)
age <- sample(18:65, n_participants, replace = TRUE)

# Combinar todas as variáveis em um único dataframe
simulated_data <- bind_cols(dass_df, data.frame(sex = sex, age = age))

# Alterar os nomes das colunas
colnames(simulated_data) <- c(paste0("dass_", 1:21), "sex", "age")

# Visualizar as primeiras linhas do dataframe simulado
head(simulated_data)

simulated_data |> 
  summarise(
    across(where(is.numeric),
           list(min = min,
                max = max))
    )

write_csv(simulated_data, file = "./data/dass_simulado.csv")
```

```{r}
#| eval: false
dass_simulado <- read_csv("https://tinyurl.com/dassdata")
```

```{r}
#| include: false

dass_simulado <- read_csv("./data/dass_simulado.csv")

```

```{r}
glimpse(dass_simulado)
```

## `dass_simulado`

| Variável       |       |
|----------------|-------|
| dass_1:dass_21 | DASS  |
| sex            | Sexo  |
| age            | Idade |

## Criação da variável `depressao`

```{r}
#| echo: false
depressao_itens
```

## Criação da variável `depressao`

```{r}
#| code-line-numbers: "|1|2|3|4|5|6|7|8|9|10|11"
#| output-location: slide
dass_simulado |>
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```

## [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html)

-   `mutate()`: opera nas colunas
-   `rowwise()`: faz o mutate operar nas linhas
    -   tipo especial de agrupamento

## [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html)

```{r}
df <- tibble(x = 1:2, y = 3:4, z = 5:6)

df
```

## [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html)

Calculou a média de `x`, `y` e `z` através de todas as linhas

```{r}

df %>% 
  mutate(
    m = mean(c(x, y, z))
    )

(1+3+5+2+4+6)/6
```

## [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html)

Calculou a média para cada linha

```{r}
df %>% 
  rowwise() %>% 
  mutate(
    m = mean(c(x, y, z))
    )

(1+3+5)/3

(2+4+6)/3
```

## DASS-21: depressão

```{r}
#| echo: false
depressao_itens
```

## Criação da variável `depressao`

```{r}
#| code-line-numbers: "|1|2|"
#| output-location: slide
dass_simulado |>
  #rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```

## Criação da variável `depressao`

```{r}
#| code-line-numbers: "|1|2|"
#| output-location: slide
dass_simulado |>
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```

## Salvar a variável `depressão` no banco de dados (`<-`)

```{r}
#| output-location: slide
dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .before = 1
    ) |> 
  ungroup()

dass_simulado
```

## Exercícios

Salve a variável `ansiedade` no banco dass_simulado e faça com que ela seja a segunda coluna de dados, depois de `depressao`.

## Ansiedade

```{r}
#| echo: false

ansiedade_itens
```

## Resposta

```{r}
#| output-location: slide 

dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    ansiedade = sum(c(dass_2,dass_4,dass_7,
                      dass_9,dass_15,dass_19,
                      dass_20)),
    .after = depressao
    ) |> 
  ungroup()

dass_simulado
```

## Exercícios

Salve a variável `estresse` no banco dass_simulado e faça com que ela seja a terceira coluna de dados, depois de `ansiedade`.

## DASS-21: Estresse

```{r}
#| echo: false

estresse_itens
```

## Resposta

```{r}
#| output-location: slide
dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    estresse = sum(dass_1,dass_6,dass_8,
                   dass_11,dass_12,dass_14,
                   dass_18),
    .after = ansiedade
    ) |> 
  ungroup()

dass_simulado


```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html): Criação de variáveis compostas

-   variáveis no banco em sequência: `c_across()`

```{r}
#| eval: false
#| include: false

dass_simulado_seq <- 
  read_csv("./data/dass_simulado.csv")

dass_simulado_seq <- 
  dass_simulado_seq |>
  relocate(dass_3,dass_5,dass_10,dass_13,
           dass_16,dass_17,dass_21,dass_2,
           dass_4,dass_7,dass_9,dass_15,
           dass_19,dass_20,dass_1,dass_6,
           dass_8,dass_11,dass_12,dass_14,
           dass_18) |> 
  rename_with(~ str_c("d",1:7),
              .cols = dass_3:dass_21) |> 
  rename_with(~ str_c("a",1:7),
              .cols = dass_2:dass_20) |> 
  rename_with(~ str_c("e",1:7),
              .cols = dass_1:dass_18)

dass_simulado_seq |> 
  write_csv("./data/dass_simulado_seq.csv")
  
```

```{r}
#| echo: false
#| message: false
#| warning: false
read_csv("./data/dass_simulado_seq.csv")
```

## `dass_simulado_seq`: Importação do banco

```{r}
#| include: false
dass_simulado_seq <- 
  read_csv("./data/dass_simulado_seq.csv")
```

```{r}
#| eval: false
dass_simulado_seq <- 
  read_csv("https://tinyurl.com/dassseqq")
```

## Criação da variável `depressao`: `c_across()`

```{r}
dass_simulado_seq <- dass_simulado_seq |>
  rowwise() |> 
  mutate(
    depressao = sum(c_across(d1:d7)),
    .before = d1
  ) |> 
  ungroup()
```

## Conferindo o resultado

```{r}
dass_simulado |> 
  summarise(
    m = mean(depressao),
    sd = sd(depressao)
  )
```

```{r}
dass_simulado_seq |> 
  summarise(
    m = mean(depressao),
    sd = sd(depressao)
  )
```

## Exerícios

Salve as variáveis depressao, ansiedade e estresse no banco dass_simulado_seq

## Resposta - parte 1: calculando as variáveis

```{r}
#| include: false

dass_simulado_seq <- 
  read_csv("./data/dass_simulado_seq.csv")
```

```{r}
dass_simulado_seq <- dass_simulado_seq |> 
  rowwise() |> 
  mutate(
    depressao = sum(c_across(d1:d7)),
    ansiedade = sum(c_across(a1:a7)),
    estresse = sum(c_across(e1:e7))
  ) |> 
  ungroup()
  
```

## Respost parte 2: conferindo o resultado

```{r}
dass_simulado_seq |> 
  glimpse()
```

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

permite que você selecione rapidamente um subconjunto de variáveis a partir de operações usando os seus nomes

```{r}
flights |> 
  glimpse()
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): Seleciona as colunas pelo nome]{style="font-size: 40pt"}

```{r}
flights |> 
  select(year,month,day)
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): Seleciona todas as colunas entre ano e dia (inclusive)]{style="font-size: 40pt"}

```{r}
flights |> 
  select(year:day)
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): Seleciona todas as colunas, exceto as de ano a dia (inclusive)]{style="font-size: 40pt"}

```{r}
flights |> 
  select(!year:day)
```

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

::: panel-tabset
### Seleciona caracteres

```{r}
flights |> 
  select(where(is.character))
```

### Seleciona números

```{r}
flights |> 
  select(where(is.double))
```
:::

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

::: panel-tabset
### Começa com

```{r}
flights |> 
  select(starts_with("dep"))
```

### Termina com

```{r}
flights |> 
  select(ends_with("time"))
```
:::

## [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

Altera os nomes de variáveis individuais usando a sintaxe novo_nome = velho_nome

```{r}
glimpse(flights)
```

## [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

```{r}
flights |> 
  rename(
    ano = year,
    mes = month,
    dia = day
    )
```

## [`rename_with()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

Renomeia as colunas usando uma função

```{r}
glimpse(flights)
```

## [`rename_with()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

```{r}
flights |> 
  rename_with(~ toupper(.),
              .cols = 1:3)
```

## [`rename_with()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

```{r}
flights |> 
  rename_with(~ str_remove_all(., "_"))
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

Para bancos de dados com muitas inconsistências

```{r}
#| include: false
#| eval: false

tibble(
  Nome.do.Cliente = c("João", "Maria", "Pedro"),
  ID_Cliente = c(1, 2, 3),
  Endereço_de.Email = c("joao@email.com", "maria@email.com", "pedro@email.com"),
  "Número de Telefone" = c("123456789", "987654321", "555555555")
) |> 
  write_csv("./data/inconsistente.csv")
```

```{r}
inconsistente <- read_csv("./data/inconsistente.csv")

inconsistente
```

```{r}
#| eval: false
library(janitor)
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

```{r}
inconsistente |> 
  clean_names()
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

Não esqueça de salvar as alterações usando operador de atribuição `<-`

```{r}
inconsistente <- inconsistente |>
  clean_names()

inconsistente
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

Use para mover as variáveis (colunas)

```{r}
glimpse(flights)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

```{r}
flights |> 
  relocate(dep_time)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

É possível escolher a posição em que a variável vai ficar usando `.after` (depois) ou `.before` (antes)

```{r}
flights |> 
  relocate(dep_time,
           .after  = month)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

É possível deslocar grupos de variáveis simultaneamente

```{r}
flights |> 
  relocate(dep_delay:arr_delay,
           .before = day)
```

## Exercicios

A partir do banco de dados `flights` crie um novo banco chamado `atrasos` contendo as variáveis `year` (ano), `month` (mês), `day` (dia), `dep_delay` (atraso na decolagem), `arr_delay` (atraso no pouso), `carrier` (companhia). Os nomes das variáveis devem estar em português e a primeira variável deve ser `carrier`.

## Resposta

::: panel-tabset
## Código

```{r}
atrasos <- flights |> 
  select(year:day,
         dep_delay,
         arr_delay,
         carrier) |> 
  rename(
    ano = year,
    mes = month,
    dia = day,
    atraso_decolagem = dep_delay,
    atraso_pouso = arr_delay,
    companhia = carrier
    ) |> 
  relocate(companhia)
```

## Resultado

```{r}
atrasos
```

## Código alternativo

```{r}
flights |> 
  select(companhia = carrier,
         ano = year,
         mes = month,
         dia = day,
         atraso_decolagem = dep_delay,
         atraso_pouso = arr_delay)
```
:::

## 4.5 Grupos

-   [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)

-   [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)

## [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)

Divide o banco de dados em grupos significativos para a análise, mas não altera o banco.

```{r}
flights |> 
  group_by(month)
```

## [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)

resume as estatísticas.

::: panel-tabset
## Variáveis ausentes (`NA`)

```{r}
flights |> 
  summarise(
    atraso_medio = mean(dep_delay)
    )
```

## Correção das variáveis ausentes (`NA`)

```{r}
flights |> 
  summarise(
    atraso_med_partida = mean(dep_delay,na.rm = T)
    )
```
:::

## Sumário de várias estatísticas

Você pode calcular várias estatísticas de uma só vez

```{r}
flights |> 
  summarise(
    m_atraso_partida = mean(dep_delay,na.rm = T),
    sd_atraso_partida = sd(dep_delay,na.rm = T),
    n = n()
    )
```

## [[`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)]{style="font-size: 36pt"}

Se usado com `group_by()`, mostra uma linha para cada grupo

```{r}
flights |> 
  group_by(month) |> 
  summarise(
    atraso_medio = mean(dep_delay,na.rm = T),
    n = n()
    )
```

## Exercícios

Descubra qual companhia (`carrier`) tem, em média, os menores atrasos na decolagem (`dep_delay`). Dica: você vai precisar da função [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

## Resposta

```{r}
flights |> 
  group_by(carrier) |> 
  summarise(
    m = mean(dep_delay,na.rm = T)
    ) |> 
  arrange(m)
```

## Exercícios

Descubra de qual aeroporto partem (`origin`) os voos com, em média, os maiores atrasos na decolagem (`dep_delay`). Dica: use a função [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) com o argumento `desc()`

## Resposta

```{r}
flights |> 
  group_by(origin) |> 
  summarise(
    m = mean(dep_delay,na.rm = T)
    ) |> 
  arrange(desc(m))
```

## Exercícios

Descubra em qual aeroporto chegam (`dest`) os voos com maiores atrasos (`arr_delay`)

## Resposta

```{r}
flights |> 
  group_by(dest) |> 
  summarise(
    m = mean(arr_delay,na.rm = T)
    ) |> 
  arrange(desc(m))
```

## Compartilhar conhecimento sempre!

O código e as imagens utilizados para a construção desse slide estão disponíveis no [link](https://github.com/pablo-huascar/rpsi) a seguir:

<https://github.com/pablo-huascar/rpsi>
